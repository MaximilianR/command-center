/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class DarknodeRegistry extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): DarknodeRegistry;
  address: string;
  methods: {
    VERSION(): TransactionObject<string>;

    claimOwnership(): TransactionObject<void>;

    currentEpoch(): TransactionObject<{
      epochhash: BN;
      blocktime: BN;
      0: BN;
      1: BN;
    }>;

    darknodePayment(): TransactionObject<string>;

    isOwner(): TransactionObject<boolean>;

    minimumBond(): TransactionObject<BN>;

    minimumEpochInterval(): TransactionObject<BN>;

    minimumPodSize(): TransactionObject<BN>;

    nextMinimumBond(): TransactionObject<BN>;

    nextMinimumEpochInterval(): TransactionObject<BN>;

    nextMinimumPodSize(): TransactionObject<BN>;

    nextSlasher(): TransactionObject<string>;

    numDarknodes(): TransactionObject<BN>;

    numDarknodesNextEpoch(): TransactionObject<BN>;

    numDarknodesPreviousEpoch(): TransactionObject<BN>;

    owner(): TransactionObject<string>;

    previousEpoch(): TransactionObject<{
      epochhash: BN;
      blocktime: BN;
      0: BN;
      1: BN;
    }>;

    ren(): TransactionObject<string>;

    renounceOwnership(): TransactionObject<void>;

    slasher(): TransactionObject<string>;

    store(): TransactionObject<string>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    recoverTokens(_token: string): TransactionObject<void>;

    register(
      _darknodeID: string,
      _publicKey: string | number[]
    ): TransactionObject<void>;

    deregister(_darknodeID: string): TransactionObject<void>;

    epoch(): TransactionObject<void>;

    transferStoreOwnership(_newOwner: string): TransactionObject<void>;

    claimStoreOwnership(): TransactionObject<void>;

    updateDarknodePayment(_darknodePayment: string): TransactionObject<void>;

    updateMinimumBond(
      _nextMinimumBond: number | string
    ): TransactionObject<void>;

    updateMinimumPodSize(
      _nextMinimumPodSize: number | string
    ): TransactionObject<void>;

    updateMinimumEpochInterval(
      _nextMinimumEpochInterval: number | string
    ): TransactionObject<void>;

    updateSlasher(_slasher: string): TransactionObject<void>;

    slash(
      _guilty: string,
      _challenger: string,
      _percentage: number | string
    ): TransactionObject<void>;

    refund(_darknodeID: string): TransactionObject<void>;

    getDarknodeOwner(_darknodeID: string): TransactionObject<string>;

    getDarknodeBond(_darknodeID: string): TransactionObject<BN>;

    getDarknodePublicKey(_darknodeID: string): TransactionObject<string>;

    getDarknodes(
      _start: string,
      _count: number | string
    ): TransactionObject<(string)[]>;

    getPreviousDarknodes(
      _start: string,
      _count: number | string
    ): TransactionObject<(string)[]>;

    isPendingRegistration(_darknodeID: string): TransactionObject<boolean>;

    isPendingDeregistration(_darknodeID: string): TransactionObject<boolean>;

    isDeregistered(_darknodeID: string): TransactionObject<boolean>;

    isDeregisterable(_darknodeID: string): TransactionObject<boolean>;

    isRefunded(_darknodeID: string): TransactionObject<boolean>;

    isRefundable(_darknodeID: string): TransactionObject<boolean>;

    isRegistered(_darknodeID: string): TransactionObject<boolean>;

    isRegisteredInPreviousEpoch(
      _darknodeID: string
    ): TransactionObject<boolean>;
  };
  events: {
    LogDarknodeDeregistered: ContractEvent<{
      _operator: string;
      _darknodeID: string;
      0: string;
      1: string;
    }>;
    LogDarknodeOwnerRefunded: ContractEvent<{
      _operator: string;
      _amount: BN;
      0: string;
      1: BN;
    }>;
    LogDarknodePaymentUpdated: ContractEvent<{
      _previousDarknodePayment: string;
      _nextDarknodePayment: string;
      0: string;
      1: string;
    }>;
    LogDarknodeRegistered: ContractEvent<{
      _operator: string;
      _darknodeID: string;
      _bond: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    LogDarknodeSlashed: ContractEvent<{
      _operator: string;
      _darknodeID: string;
      _challenger: string;
      _percentage: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    LogMinimumBondUpdated: ContractEvent<{
      _previousMinimumBond: BN;
      _nextMinimumBond: BN;
      0: BN;
      1: BN;
    }>;
    LogMinimumEpochIntervalUpdated: ContractEvent<{
      _previousMinimumEpochInterval: BN;
      _nextMinimumEpochInterval: BN;
      0: BN;
      1: BN;
    }>;
    LogMinimumPodSizeUpdated: ContractEvent<{
      _previousMinimumPodSize: BN;
      _nextMinimumPodSize: BN;
      0: BN;
      1: BN;
    }>;
    LogNewEpoch: ContractEvent<BN>;
    LogSlasherUpdated: ContractEvent<{
      _previousSlasher: string;
      _nextSlasher: string;
      0: string;
      1: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
